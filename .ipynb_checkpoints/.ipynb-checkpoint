{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Quora Question Pairs Duplicate Check through Weights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import pandas for reading in csv file, numpy for math operations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read in CSV file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [],
   "source": [
    "training_set= pd.read_csv('/Users/srikharpadmanabhan/Documents/machine-learninig-quora/quora-question-pairs/train.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check to make sure training_set is read in correctly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>qid1</th>\n",
       "      <th>qid2</th>\n",
       "      <th>question1</th>\n",
       "      <th>question2</th>\n",
       "      <th>is_duplicate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>What is the step by step guide to invest in sh...</td>\n",
       "      <td>What is the step by step guide to invest in sh...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>What is the story of Kohinoor (Koh-i-Noor) Dia...</td>\n",
       "      <td>What would happen if the Indian government sto...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>How can I increase the speed of my internet co...</td>\n",
       "      <td>How can Internet speed be increased by hacking...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  qid1  qid2                                          question1  \\\n",
       "0   0     1     2  What is the step by step guide to invest in sh...   \n",
       "1   1     3     4  What is the story of Kohinoor (Koh-i-Noor) Dia...   \n",
       "2   2     5     6  How can I increase the speed of my internet co...   \n",
       "\n",
       "                                           question2  is_duplicate  \n",
       "0  What is the step by step guide to invest in sh...             0  \n",
       "1  What would happen if the Indian government sto...             0  \n",
       "2  How can Internet speed be increased by hacking...             0  "
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_set.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Take just the questions from training_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>question1</th>\n",
       "      <th>question2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>What is the step by step guide to invest in sh...</td>\n",
       "      <td>What is the step by step guide to invest in sh...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>What is the story of Kohinoor (Koh-i-Noor) Dia...</td>\n",
       "      <td>What would happen if the Indian government sto...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>How can I increase the speed of my internet co...</td>\n",
       "      <td>How can Internet speed be increased by hacking...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           question1  \\\n",
       "0  What is the step by step guide to invest in sh...   \n",
       "1  What is the story of Kohinoor (Koh-i-Noor) Dia...   \n",
       "2  How can I increase the speed of my internet co...   \n",
       "\n",
       "                                           question2  \n",
       "0  What is the step by step guide to invest in sh...  \n",
       "1  What would happen if the Indian government sto...  \n",
       "2  How can Internet speed be increased by hacking...  "
      ]
     },
     "execution_count": 307,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_questions=training_set[['question1','question2']]\n",
    "#training_set.head(3)\n",
    "training_questions.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         What is the step by step guide to invest in sh...\n",
       "1         What is the story of Kohinoor (Koh-i-Noor) Dia...\n",
       "2         How can I increase the speed of my internet co...\n",
       "3         Why am I mentally very lonely? How can I solve...\n",
       "4         Which one dissolve in water quikly sugar, salt...\n",
       "                                ...                        \n",
       "808575    How many keywords are there in PERL Programmin...\n",
       "808576           Is it true that there is life after death?\n",
       "808577                                    What's this coin?\n",
       "808578    I am having little hairfall problem but I want...\n",
       "808579        What is it like to have sex with your cousin?\n",
       "Length: 808580, dtype: object"
      ]
     },
     "execution_count": 308,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_questions=pd.Series(training_questions['question1'].tolist()+training_questions['question2'].tolist()).astype(str)\n",
    "train_questions.str.replace('?',' ')\n",
    "train_questions.str.replace('.',' ')\n",
    "train_questions.str.replace('!',' ')\n",
    "train_questions.str.replace('(',' ')\n",
    "train_questions.str.replace(')',' ')\n",
    "train_questions.str.replace('[',' ')\n",
    "train_questions.str.replace(']',' ')\n",
    "train_questions.str.replace('-',' ')\n",
    "train_questions.str.replace('_',' ')\n",
    "train_questions.str.replace('/',' ')\n",
    "train_questions.str.replace('#',' ')\n",
    "train_questions.str.replace('$',' ')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import Counter\n",
    "from nltk.corpus import stopwords\n",
    "\n",
    "\n",
    "def set_weights(count,min_count):\n",
    "    if(count < min_count ):\n",
    "        return 0\n",
    "    else:\n",
    "        return 1/(count+5000)\n",
    "\n",
    "word_collection=(\" \".join(train_questions)).lower().split()\n",
    "counts=Counter(word_collection)\n",
    "weights={word: set_weights(count,3) for word, count in counts.items()}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define a function that return the compatiblity of the two questions. Exclude words that are common in english."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [],
   "source": [
    "def question_word_match(row):\n",
    "    notWords=set(stopwords.words(\"english\"))\n",
    "    question1_words = {}\n",
    "    question2_words = {}\n",
    "    for word in str(row['question1']).lower().split():\n",
    "        if word not in notWords:\n",
    "            question1_words[word] = 1\n",
    "    for word in str(row['question2']).lower().split():\n",
    "        if word not in notWords:\n",
    "            question2_words[word] = 1\n",
    "    if len(question1_words) == 0 or len(question2_words) == 0:\n",
    "        return 0.3\n",
    "    \n",
    "    \n",
    "    shared_weights = [weights.get(w, 0) for w in question1_words.keys() if w in question2_words] + [weights.get(w, 0) for w in question2_words.keys() if w in question1_words]\n",
    "    total_weights = [weights.get(w, 0) for w in question1_words] + [weights.get(w, 0) for w in question2_words]\n",
    "    \n",
    "    matchability = np.sum(shared_weights)/np.sum(total_weights)\n",
    "    if np.sum(total_weights)==0:\n",
    "        return 0.3\n",
    "    else:\n",
    "        return matchability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/srikharpadmanabhan/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:18: RuntimeWarning: invalid value encountered in long_scalars\n",
      "/Users/srikharpadmanabhan/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:18: RuntimeWarning: invalid value encountered in double_scalars\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3650502257603887\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import f1_score\n",
    "\n",
    "train_word_match=training_set.apply(question_word_match, axis=1, raw=True)\n",
    "fpr, tpr, thresholds = metrics.roc_curve(training_set['is_duplicate'], train_word_match, pos_label=1)\n",
    "idx = (np.abs(tpr - 0.8)).argmin()\n",
    "print(thresholds[idx])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "label_curve='ROC curve (area = ' +str(roc_auc_score(training_set['is_duplicate'], train_word_match))\n",
    "plt.plot(fpr,tpr,color='blue',label=label_curve)\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC Curve: Weighted Words')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.fill_between(fpr,tpr,color='navajowhite')\n",
    "plt.savefig('ROC_CURVE_WEIGHTED_WORD.jpeg')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import precision_recall_curve\n",
    "from sklearn.metrics import average_precision_score\n",
    "precision, recall, thresholds = precision_recall_curve(training_set['is_duplicate'], train_word_match)\n",
    "label_curve='Precision-Recall Curve (area = ' +str(average_precision_score(training_set['is_duplicate'], train_word_match))\n",
    "plt.plot(recall,precision,color='blue',label=label_curve)\n",
    "plt.xlim([0.05, 1])\n",
    "plt.xlabel('Recall')\n",
    "plt.ylabel('Precision')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.title('Precision-Recall Curve')\n",
    "plt.fill_between(recall,precision,color='navajowhite')\n",
    "plt.savefig('precision-recall-curve.jpeg')\n",
    "plt.show()\n",
    "                                                       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/srikharpadmanabhan/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:24: RuntimeWarning: invalid value encountered in double_scalars\n",
      "/Users/srikharpadmanabhan/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:24: RuntimeWarning: invalid value encountered in long_scalars\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.series.Series'>\n",
      "<class 'pandas.core.series.Series'>\n",
      "<class 'pandas.core.series.Series'>\n",
      "<class 'pandas.core.series.Series'>\n",
      "<class 'pandas.core.series.Series'>\n",
      "<class 'pandas.core.series.Series'>\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import KFold\n",
    "n_folds=6\n",
    "kfold = KFold(n_folds, True, 1)\n",
    "accuracy_scores=[]\n",
    "f1_scores=[]\n",
    "\n",
    "def question_word_match1(row):\n",
    "    notWords=set(stopwords.words(\"english\"))\n",
    "    question1_words = {}\n",
    "    question2_words = {}\n",
    "    for word in str(row['question1']).lower().split():\n",
    "        if word not in notWords:\n",
    "            question1_words[word] = 1\n",
    "    for word in str(row['question2']).lower().split():\n",
    "        if word not in notWords:\n",
    "            question2_words[word] = 1\n",
    "    if len(question1_words) == 0 or len(question2_words) == 0:\n",
    "        return 0\n",
    "    \n",
    "    \n",
    "    shared_weights = [weights1.get(w, 0) for w in question1_words.keys() if w in question2_words] + [weights1.get(w, 0) for w in question2_words.keys() if w in question1_words]\n",
    "    total_weights = [weights1.get(w, 0) for w in question1_words] + [weights1.get(w, 0) for w in question2_words]\n",
    "    \n",
    "    matchability = np.sum(shared_weights)/np.sum(total_weights)\n",
    "    if np.sum(total_weights)==0:\n",
    "        return 0\n",
    "    else:\n",
    "        if matchability>0.365:\n",
    "            return 1\n",
    "        else:\n",
    "            return 0\n",
    "\n",
    "for train, test in kfold.split(training_questions):\n",
    "    training_questions_train=training_questions.loc[train]\n",
    "    test_set_cv=training_set.loc[test]\n",
    "    train_questions1=pd.Series(training_questions_train[\"question1\"].tolist()+training_questions_train['question2'].tolist()).astype(str)\n",
    "    train_questions1.str.replace('?',' ')\n",
    "    train_questions1.str.replace('.',' ')\n",
    "    train_questions1.str.replace('!',' ')\n",
    "    \n",
    "    \n",
    "    \n",
    "    word_collection1=(\" \".join(train_questions1)).lower().split()\n",
    "    counters=Counter(word_collection1)\n",
    "    weights1={word: set_weights(count,3) for word, count in counters.items()}\n",
    "    \n",
    "    test_match_cv=test_set_cv.apply(question_word_match1, axis=1, raw=True)\n",
    "    print(type(test_match_cv))\n",
    "    accuracy_scores.append(accuracy_score(test_set_cv['is_duplicate'], test_match_cv))\n",
    "    f1_scores.append(f1_score(test_set_cv['is_duplicate'], test_match_cv))\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Mean: 0.6915061004216553\n",
      "Accuracy Max: 0.6933602445757027\n",
      "F1 Mean: 0.6591314846554219\n",
      "F1 Max: 0.6614252693947977\n"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy Mean: \"+str(sum(accuracy_scores)/n_folds))\n",
    "print(\"Accuracy Max: \"+str(max(accuracy_scores)))\n",
    "print(\"F1 Mean: \"+str(sum(f1_scores)/n_folds))\n",
    "print(\"F1 Max: \"+str(max(f1_scores)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
